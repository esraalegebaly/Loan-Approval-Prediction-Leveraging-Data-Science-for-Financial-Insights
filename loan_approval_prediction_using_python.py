# -*- coding: utf-8 -*-
"""Loan Approval Prediction using Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QS0vlPTG_KYAgw-E4GveExNEo_7RjLut
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier

df = pd.read_csv('loan_prediction.csv')
print(df.head())

df = df.drop('Loan_ID', axis=1)

df.isnull().sum()

print(df.describe())

# Fill missing values in categorical columns with mode
df['Gender'].fillna(df['Gender'].mode()[0], inplace=True)
df['Married'].fillna(df['Married'].mode()[0], inplace=True)
df['Dependents'].fillna(df['Dependents'].mode()[0], inplace=True)
df['Self_Employed'].fillna(df['Self_Employed'].mode()[0], inplace=True)

# Fill missing values in LoanAmount with the median
df['LoanAmount'].fillna(df['LoanAmount'].median(), inplace=True)

# Fill missing values in Loan_Amount_Term with the mode
df['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].mode()[0], inplace=True)

# Fill missing values in Credit_History with the mode
df['Credit_History'].fillna(df['Credit_History'].mode()[0], inplace=True)

import plotly.express as px

loan_status_count = df['Loan_Status'].value_counts()
fig_loan_status = px.pie(loan_status_count,
                         names=loan_status_count.index,
                         title='Loan Approval Status',
                         color_discrete_sequence=px.colors.qualitative.Pastel,  # Use a different color palette
                         hole=0.3)  # Create a donut chart by setting hole size
fig_loan_status.show()

import plotly.express as px

# Get the gender count
gender_count = df['Gender'].value_counts()

# Create the bar chart with different colors
fig_gender = px.bar(x=gender_count.index,
                    y=gender_count.values,
                    labels={'x': 'Gender', 'y': 'Count'},  # Add axis labels
                    title='Gender Distribution',
                    color=gender_count.index,  # Different colors for each bar
                    color_discrete_sequence=px.colors.qualitative.Pastel  # Choose a color scheme
                   )

# Show the chart
fig_gender.show()

import plotly.express as px

# Get the education count
education_count = df['Education'].value_counts()

# Create the bar chart
fig_education = px.bar(x=education_count.index,
                       y=education_count.values,
                       labels={'x': 'Education Level', 'y': 'Count'},  # Add axis labels
                       title='Education Distribution',
                       color=education_count.index,  # Different colors for each bar
                       color_discrete_sequence=px.colors.qualitative.Vivid  # Choose a color palette
                      )

# Show the chart
fig_education.show()

import plotly.express as px

# Get the self-employed count
self_employed_count = df['Self_Employed'].value_counts()

# Create the bar chart with customization
fig_self_employed = px.bar(
    x=self_employed_count.index,
    y=self_employed_count.values,
    labels={'x': 'Self-Employed Status', 'y': 'Count'},  # Add axis labels
    title='Self-Employment Distribution',
    color=self_employed_count.index,  # Different colors for each bar
    color_discrete_sequence=px.colors.qualitative.Plotly  # Choose a color palette
)

# Show the chart
fig_self_employed.show()

import plotly.express as px

# Create the histogram with customization
fig_applicant_income = px.histogram(
    df,
    x='ApplicantIncome',
    title='Applicant Income Distribution',
    labels={'ApplicantIncome': 'Applicant Income'},  # Axis label
    color_discrete_sequence=['lightblue'],  # Bar color
    nbins=30  # Number of bins for the histogram
)

# Show the histogram
fig_applicant_income.show()

import plotly.express as px

# Create the box plot with customization
fig_income = px.box(
    df,
    x='Loan_Status',
    y='ApplicantIncome',
    color='Loan_Status',
    title='Loan Status vs Applicant Income',
    labels={'Loan_Status': 'Loan Status', 'ApplicantIncome': 'Applicant Income'},  # Axis labels
    color_discrete_sequence=px.colors.qualitative.Plotly  # Choose a color palette
)

# Show the box plot
fig_income.show()

# Calculate the IQR
Q1 = df['ApplicantIncome'].quantile(0.25)
Q3 = df['ApplicantIncome'].quantile(0.75)
IQR = Q3 - Q1

# Define the lower and upper bounds for outliers
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Remove outliers
df = df[(df['ApplicantIncome'] >= lower_bound) & (df['ApplicantIncome'] <= upper_bound)]

import plotly.express as px

# Create the box plot with customization
fig_coapplicant_income = px.box(
    df,
    x='Loan_Status',
    y='CoapplicantIncome',
    color='Loan_Status',
    title='Loan Status vs Coapplicant Income',
    labels={'Loan_Status': 'Loan Status', 'CoapplicantIncome': 'Coapplicant Income'},  # Axis labels
    color_discrete_sequence=px.colors.qualitative.Plotly  # Choose a color palette
)

# Show the box plot
fig_coapplicant_income.show()

# Calculate the IQR
Q1 = df['CoapplicantIncome'].quantile(0.25)
Q3 = df['CoapplicantIncome'].quantile(0.75)
IQR = Q3 - Q1

# Define the lower and upper bounds for outliers
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Remove outliers
df = df[(df['CoapplicantIncome'] >= lower_bound) & (df['CoapplicantIncome'] <= upper_bound)]

import plotly.express as px

# Create the box plot with customization
fig_loan_amount = px.box(
    df,
    x='Loan_Status',
    y='LoanAmount',
    color='Loan_Status',
    title='Loan Status vs Loan Amount',
    labels={'Loan_Status': 'Loan Status', 'LoanAmount': 'Loan Amount'},  # Axis labels
    color_discrete_sequence=px.colors.qualitative.Plotly  # Choose a color palette
)

# Show the box plot
fig_loan_amount.show()

import plotly.express as px

# Create the histogram with customization
fig_credit_history = px.histogram(
    df,
    x='Credit_History',
    color='Loan_Status',
    barmode='group',
    title='Loan Status vs Credit History',
    labels={'Credit_History': 'Credit History (0 or 1)', 'Loan_Status': 'Loan Status'},  # Axis labels
    color_discrete_sequence=px.colors.qualitative.Plotly  # Choose a color palette
)

# Show the histogram
fig_credit_history.show()

fig_property_area = px.histogram(df, x='Property_Area', color='Loan_Status',
                                 barmode='group',
                                title='Loan_Status vs Property_Area')
fig_property_area.show()

# Convert categorical columns to numerical using one-hot encoding
cat_cols = ['Gender', 'Married', 'Dependents', 'Education', 'Self_Employed', 'Property_Area']
df = pd.get_dummies(df, columns=cat_cols)

# Split the dataset into features (X) and target (y)
X = df.drop('Loan_Status', axis=1)
y = df['Loan_Status']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the numerical columns using StandardScaler
scaler = StandardScaler()
numerical_cols = ['ApplicantIncome', 'CoapplicantIncome', 'LoanAmount', 'Loan_Amount_Term', 'Credit_History']
X_train[numerical_cols] = scaler.fit_transform(X_train[numerical_cols])
X_test[numerical_cols] = scaler.transform(X_test[numerical_cols])

from sklearn.svm import SVC
model = SVC(random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print(y_pred)

# Convert X_test to a DataFrame
X_test_df = pd.DataFrame(X_test, columns=X_test.columns)

# Add the predicted values to X_test_df
X_test_df['Loan_Status_Predicted'] = y_pred
print(X_test_df.head())

